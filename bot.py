"""
–ú–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import datetime
import os

import requests
import telebot

from admin import admin_actions
from api_worker import get_student, get_payment, get_questions, \
    get_interview_question, check_interview_question
from billing import get_payment_url
from config import bot
from keyboard_mixin import KeyboardMixin
from models import User, Interview, current_date

TG_ID_ADMIN = 814401631

kb = KeyboardMixin()

temp_data = {}
interview_data = {}
pay_data = {}
number_of_passes = {}
interview_question = {}


@bot.message_handler(commands=['start'])
def welcome(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É 'start',
    –≤—ã–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç tg id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg id
    –≤ —Ç–∞–±–ª–∏—Ü–µ users.db. –ï—Å–ª–∏ tg id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤—ã–¥–∞—ë—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ users_kb, –∏–Ω–∞—á–µ –≤—ã–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'.
    –ï—Å–ª–∏ –∑–∞—à—ë–ª –∞–¥–º–∏–Ω, —Ç–æ –æ–Ω–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –µ–≥–æ tg id c id –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –∏
    –µ—Å–ª–∏ id —Å–æ–≤–ø–∞–ª–æ, –±–æ—Ç –≤—ã–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω—É –∏ –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é
    –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    try:
        user = User.select().where(User.chat_id == message.chat.id).first()
        keyboard = kb.user_kb()
        if message.chat.id == TG_ID_ADMIN:
            keyboard = kb.admin_kb()
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.name}',
                         reply_markup=keyboard)
    except AttributeError:
        bot.send_message(
            message.chat.id,
            '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ CourceMC!\n'
            ' –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å,'
            ' –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —É–∫–∞–∑–∞–Ω–Ω—ã–π '
            '–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∫—É—Ä—Å–∞!',
            reply_markup=kb.main_kb(),
        )


@bot.message_handler(func=lambda message: message.text == '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—èüîë')
def login(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å main_kb, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    temp_data[message.chat.id] = {}
    keyboard = telebot.types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ.',
        reply_markup=keyboard,
    )
    bot.register_next_step_handler(message, password)


def password(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å.
    –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.
    """
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:')
    bot.register_next_step_handler(message, check_autorization)
    temp_data[message.chat.id]['login'] = message.text


def check_autorization(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–æ–ª—å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å,
    –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ api,
    –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –ø—Ä–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π.
    """
    temp_data[message.chat.id]['password'] = message.text
    for i in get_student():
        if (
                i['name'] == temp_data[message.chat.id]['login']
                and i['password'] == temp_data[message.chat.id]['password']
        ):
            user = User(
                chat_id=message.chat.id,
                name=temp_data[message.chat.id]['login']
            )

            user.save()
            if message.chat.id == TG_ID_ADMIN:
                admin_actions(message, user)
            else:
                bot.send_message(
                    message.chat.id,
                    f'–ü—Ä–∏–≤–µ—Ç, {temp_data[message.chat.id]["login"]}!',
                    reply_markup=kb.user_kb(),
                )
                temp_data[message.chat.id] = {}
            break
    else:
        bot.send_message(
            message.chat.id,
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ!',
        )
        login(message)


@bot.message_handler(func=lambda message: message.text == '–ü–∏–Ω–≥ ‚öæ')
def button_ping(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–∏–Ω–≥ ‚öæ'

    –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.
    –ï—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–Ω –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '–ü–æ–Ω–≥' –Ω–∞ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ
    –∫–Ω–æ–ø–∫–∏ '–ü–∏–Ω–≥'.
    """
    bot.send_message(message.chat.id, '–ü–æ–Ω–≥ ‚öæ')


@bot.message_handler(
    func=lambda message: message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ üí§')
def skip_lesson_buttons(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã user_kb —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–Ω—è—Ç–∏—è(–π) –∏
    –≤—ã–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω—è—Ç–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–µ–ª–∞–µ—Ç
    –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.
    """
    bot.send_message(
        message.chat.id,
        '–°–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?',
        reply_markup=kb.skip_lesson_kb(),
    )


@bot.message_handler(
    func=lambda message: message.text in ['1 üí§', '2 üí§üí§', '3 üí§üí§üí§']
)
def confirmation_skip_lesson(message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã skip_lesson_kb, –∑–∞–Ω–æ—Å—è –¥–∞–Ω–Ω—ã–µ
    –æ –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–Ω—è—Ç–∏—è(–π) –≤ —Å–ª–æ–≤–∞—Ä—å number_of_passes —Å –∫–ª—é—á–æ–º
    'lessons'. –¢–∞–∫–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ
    –ø—Ä–æ–ø—É—Å–∫–µ –∑–∞–Ω—è—Ç–∏—è(–π).
    """
    bot.send_message(
        message.chat.id,
        '–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ(—è)?',
        reply_markup=kb.skip_lesson_kb2(),
    )
    if message.text == '1 üí§':
        number_of_passes['lessons'] = 1
    elif message.text == '2 üí§üí§':
        number_of_passes['lessons'] = 2
    elif message.text == '3 üí§üí§üí§':
        number_of_passes['lessons'] = 3


@bot.message_handler(func=lambda message: message.text == '–î–∞ üëç')
def pass_lesson(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–Ω—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    –ø–æ –∫–Ω–æ–ø–∫–µ '–î–∞ üëç'.

    –ù–∞ —Å–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è post –∑–∞–ø—Ä–æ—Å(—ã) (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
    –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤) —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç–æ–π –ø—Ä–æ–ø—É—Å–∫–∞
    –∑–∞–Ω—è—Ç–∏—è(–π). –¢–∞–∫–∂–µ –∞–¥–º–∏–Ω—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–ø—É—Å–∫–µ
    –∑–∞–Ω—è—Ç–∏—è(–π) –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–æ—Ç
    —Å–æ–æ–±—â–∞–µ—Ç –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–Ω—è—Ç–∏–π –∏
    –≤—ã—Å—ã–ª–∞–µ—Ç –µ–º—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É user_kb.
    """
    api_missing = os.getenv('API_MISSING')
    user = User.select().where(User.chat_id == message.chat.id).first()
    date = datetime.date.today() + datetime.timedelta(days=1)
    for _ in range(number_of_passes['lessons']):
        requests.post(
            api_missing,
            data={'username': user.name, 'date': date.strftime('%Y-%m-%d')},
            timeout=5,
        )
        date += datetime.timedelta(days=2)
    bot.send_message(
        TG_ID_ADMIN,
        f'‚ùóÔ∏è –£—á–µ–Ω–∏–∫ {user.name} –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç'
        f' {number_of_passes["lessons"]} –∑–∞–Ω—è—Ç–∏–µ(—è) ‚ùóÔ∏è',
    )
    bot.send_message(
        message.chat.id,
        '–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –∑–∞–Ω—è—Ç–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ!',
        reply_markup=kb.user_kb(),
    )


@bot.message_handler(func=lambda message: message.text == '–ù–µ—Ç üëé')
def no_pass_lesson(message):
    """
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∏ –æ—Ç–∫–∞–∑–∞–ª—Å—è –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ(—è),
    –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–µ—Ç üëé', –µ–º—É –±–æ—Ç –æ—Ç—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Å—ã–ª–∞–µ—Ç
    –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É user_kb.
    """
    bot.send_message(
        message.chat.id,
        '–•–æ—Ä–æ—à–æ, —á—Ç–æ –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ(—è) üëçüëçüëç',
        reply_markup=kb.user_kb(),
    )


@bot.message_handler(func=lambda message: message.text == '–û–ø–ª–∞—Ç–∞ üí∞')
def pay(message):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É–º–º—É,
    –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã.

    Args:
        message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ.

    Returns:
        None
    """
    user = User.select().where(User.chat_id == message.chat.id).first()
    amount = get_payment(user.name)['amount']
    if amount <= 0:
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–Ω—è—Ç–∏—è!')
        return
    payment = get_payment_url(amount)
    bot.send_message(
        message.chat.id, f'–û–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±–ª–µ–π, –ø–æ —Å—Å—ã–ª–∫–µ: {payment[0]}'
    )
    pay_data[message.chat.id] = {
        'amount': amount,
        'payment_id': payment[1],
        'name': user.name,
    }


@bot.message_handler(func=lambda message: message.text == '–¢–≤–æ–π —Å–æ–±–µ—Å üë®‚Äçüíª')
def check_category_interview_button(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–¢–≤–æ–π —Å–æ–±–µ—Å'.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:',
                     reply_markup=kb.check_category_interview())


@bot.message_handler(func=lambda message: message.text == '–í–æ–ø—Ä–æ—Å—ã')
def interview_button(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–í–æ–ø—Ä–æ—Å—ã'.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:',
                     reply_markup=kb.category_kb())


@bot.message_handler(func=lambda message: message.text == 'AI –°–æ–±–µ—Å')
def interview_question_ai_assistant_button(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'AI –°–æ–±–µ—Å'.
    """
    chat_id = message.chat.id

    amount_current_day = list(
        Interview.select().where(Interview.chat_id == chat_id,
                                 Interview.date == current_date())) or '0'
    if len(amount_current_day) >= 10:
        bot.send_message(chat_id,
                         '–í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞!')
        return
    question = get_interview_question()
    keyboard = telebot.types.ReplyKeyboardRemove()
    bot.send_message(chat_id, f'–í–æ–ø—Ä–æ—Å:\n{question}', reply_markup=keyboard)
    interview_question[chat_id] = question
    bot.register_next_step_handler(message,
                                   interview_check_ai_assistant_button)


def interview_check_ai_assistant_button(message):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞
    –æ—Ü–µ–Ω–∫—É (API).
    """
    chat_id = message.chat.id
    question = interview_question[chat_id]
    answer = message.text

    msg = bot.send_message(chat_id, '‚öôÔ∏è –û–∂–∏–¥–∞–Ω–∏–µ...')
    result = check_interview_question(question, answer)
    interview = Interview(chat_id=chat_id)
    interview.save()

    amount_current_day = list(
        Interview.select().where(Interview.chat_id == chat_id,
                                 Interview.date == current_date())) or '0'
    request_text = '–∑–∞–ø—Ä–æ—Å'
    left = 10 - len(amount_current_day)
    if 2 <= left <= 4:
        request_text += '–∞'
    elif left > 4:
        request_text += '–æ–≤'
    bot.edit_message_text(chat_id=chat_id,
                          message_id=msg.message_id,
                          text=f'–°–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å {left} '
                               f'{request_text}!',
                          reply_markup=kb.next_ai_interview())

    keyboard = kb.user_kb()
    if message.chat.id == TG_ID_ADMIN:
        keyboard = kb.admin_kb()

    bot.send_message(chat_id, text=f'–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text == 'Python')
def interview_button_Python(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'Python'.
    –í—ã–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    chat_id = message.chat.id
    bot.send_message(chat_id, '–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤:',
                     reply_markup=kb.difficulty_kb())


@bot.message_handler(
    func=lambda message: message.text in ['1-3', '1-5', '1-7', '3-5', '5-7',
                                          '7-9'])
def interview_difficult_python(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ —É—Ä–æ–≤–Ω—è Python.
    """
    chat_id = message.chat.id
    interview_data[chat_id] = {
        'category': 'Python',
        'difficulty': message.text,
        'Python': True,
    }
    bot.send_message(chat_id,
                     '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:',
                     reply_markup=kb.amount_question_kb())
    bot.register_next_step_handler(message, interview_question_amount)


@bot.message_handler(
    func=lambda message: message.text in ['HR‚Äô—Å–∫–∏–µ', 'Django', '–û–û–ü'])
def interview_button_another(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'HR', 'Django', '–û–û–ü'.
    –£—Ç–æ—á–Ω—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç chat_id –≤ temp_data.
    """
    chat_id = message.chat.id
    interview_data[chat_id] = {
        'category': message.text,
        'Python': False,
    }
    bot.send_message(chat_id,
                     '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:',
                     reply_markup=kb.amount_question_kb())
    bot.register_next_step_handler(message, interview_question_amount)


def interview_question_amount(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ—Å—å–±—ã –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ api –∫ —Å–∞–π—Ç—É, –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π
    –æ—Ç–ø—Ä–∞–≤–∫–µ –±–æ—Ç—É.
    """
    chat_id = message.chat.id
    amount: str = message.text
    if amount.isdigit() and not (5 <= int(amount) <= 20):
        bot.send_message(chat_id,
                         '‚ùå –î–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç 5 –¥–æ 20')
        bot.register_next_step_handler(message, interview_question_amount)
        return
    category = interview_data[chat_id]['category']
    string = ''
    if interview_data[chat_id]['Python']:
        difficulty = interview_data[chat_id]['difficulty']
        data = get_questions(category, amount, difficulty)
    else:
        data = get_questions(category, amount)

    for k, i in enumerate(data):
        string += f'{k + 1}) {i["title"]}\n'

    keyboard = kb.user_kb()
    if message.chat.id == TG_ID_ADMIN:
        keyboard = kb.admin_kb()
    bot.send_message(chat_id,
                     f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:\n{string}',
                     reply_markup=keyboard)


@bot.callback_query_handler(func=lambda call: call.data == 'next_ai')
def next_question_ai_interview(call):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ 'üëâ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å'. –í—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
    interview_question_ai_assistant_button.
    """
    message = call.message
    interview_question_ai_assistant_button(message)


@bot.message_handler()
def unknown_command(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
    """
    keyboard = kb.user_kb()
    if message.chat.id == TG_ID_ADMIN:
        keyboard = kb.admin_kb()
    bot.send_message(message.chat.id, 'üßê –Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª...',
                     reply_markup=keyboard)
