"""
–ú–æ–¥—É–ª—å —Å –ª–æ–≥–∏–∫–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""

import billing
from admin import admin_actions
from api_worker import get_data
from config import bot
from keyboard_mixin import KeyboardMixin
from models import *

kb = KeyboardMixin()

temp_data = {}


@bot.message_handler(commands=["start"])
def welcome(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "start",
    –≤—ã–¥–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç tg id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg id –≤ —Ç–∞–±–ª–∏—Ü–µ users.db.
    –ï—Å–ª–∏ tg id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞—ë—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ users_kb, –∏–Ω–∞—á–µ –≤—ã–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è".
    –ï—Å–ª–∏ –≤ –±–æ—Ç–∞ –∑–∞—à—ë–ª –∞–¥–º–∏–Ω, —Ç–æ –æ–Ω–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –µ–≥–æ tg id c id –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ –∏ –µ—Å–ª–∏
    id —Å–æ–≤–ø–∞–ª–æ, –±–æ—Ç –≤—ã–¥–∞—ë—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω—É –∏ –µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    user = User.select().where(User.chat_id == message.chat.id).first()
    if user.chat_id == 814401631:
        admin_actions(message, user)
    elif user:
        bot.send_message(
            message.chat.id,
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.name}",
            reply_markup=kb.user_kb(),
        )
    else:
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ CourceMC!\n"
            " –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å,"
            " –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —É–∫–∞–∑–∞–Ω–Ω—ã–π "
            "–ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –∫—É—Ä—Å–∞!",
            reply_markup=kb.main_kb(),
        )
        bot.register_next_step_handler(message, login)


def login(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å main_kb, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    temp_data[message.chat.id] = {}
    bot.send_message(
        message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ."
    )
    bot.register_next_step_handler(message, password)


def password(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å.
    –û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è.
    """
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    bot.register_next_step_handler(message, check_autorization)
    temp_data[message.chat.id]["login"] = message.text


def check_autorization(message):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞—Ä–æ–ª—å –≤ –≤–∏–¥–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–ª–æ–≤–∞—Ä—å,
    –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ api,
    –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –≤—ã–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –ø—Ä–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ - —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π.
    """
    temp_data[message.chat.id]["password"] = message.text
    flag = False
    for i in get_data():
        if (
                i["name"] == temp_data[message.chat.id]["login"]
                and i["password"] == temp_data[message.chat.id]["password"]
        ):
            flag = True
    if flag:
        bot.send_message(
            message.chat.id,
            f'–ü—Ä–∏–≤–µ—Ç, {temp_data[message.chat.id]["login"]}!',
            reply_markup=kb.user_kb(),
        )
        user = User(chat_id=message.chat.id, name=temp_data[message.chat.id]["login"])

        user.save()
    else:
        bot.send_message(
            message.chat.id,
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ!",
        )
        login(message)


@bot.message_handler(func=lambda message: message.text == "–ü–∏–Ω–≥ ‚öæ")
def button_ping(message):
    """
    –î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–ü–∏–Ω–≥ ‚öæ"

    –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω—É–∂–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.
    –ï—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–Ω –ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é "–ü–æ–Ω–≥" –Ω–∞ –µ–≥–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–∏–Ω–≥".
    """
    bot.send_message(message.chat.id, "–ü–æ–Ω–≥ ‚öæ")


@bot.message_handler(func=lambda message: message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ üí§")
def skip_lesson_buttons(message):
    bot.send_message(
        message.chat.id,
        "–°–∫–æ–ª—å–∫–æ –∑–∞–Ω—è—Ç–∏–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å?",
        reply_markup=kb.skip_lesson_kb(),
    )

    @bot.message_handler(func=lambda message: kb.skip_lesson_kb())
    def confirmation_skip_lesson(message):
        bot.send_message(
            message.chat.id,
            "–¢–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ(—è)?",
            reply_markup=kb.skip_lesson_kb2(),
        )
